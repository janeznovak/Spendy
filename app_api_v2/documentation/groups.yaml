# /api/v2/groups
#paths:
# DONE
# /groups:
#   get:
#     summary: Get all groups
#     description: Returns a list of all groups
#     tags: [Groups]
#     responses:
#       "200":
#         description: An array of groups
#         content:
#           application/json:
#             schema:
#               type: array
#               items:
#                 $ref: "#/components/schemas/Group_bare"
#       "500":
#         description: Error in database
#         content:
#           application/json:
#             schema:
#               $ref: "#/components/schemas/Error"
#       "404":
#         description: No group was found
#         content:
#           application/json:
#             schema:
#               $ref: "#/components/schemas/Error"
#             example:
#               message: "Groups not found"

# DONE
paths:
  /groups:
    post:
      summary: Create a new group
      description: Create a new group and add it to user
      tags: [Groups]
      security:
        - bearerAuth: []
      requestBody:
        description: Data for group creation
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Group_createNew_request"
      responses:
        "200":
          description: One detailed group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group_createNew_response"
        "500":
          description: Error in database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "User with this id not found"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "Unauthorized"
        "400":
          description: Invalid group name (permitted all letters, numbers) (length between 3 and 30)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Name of the group is invalid

  # DONE
  /groups/{idGroup}:
    get:
      summary: Get one detailed group
      description: Get group with populated expenses and userIds
      tags: [Groups]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: idGroup
          description: id of the group
          schema:
            type: string
          required: true
          example: 5fe8ff7f67c57310401aca3b
      responses:
        "200":
          description: One detailed group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group_populatedExpensesUserIds"
        "500":
          description: Error in database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: No group was found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "Group with id: 5fe7cc18e0fe833da436fbds not found"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "Unauthorized"

    put:
      summary: Update a group
      description: Update a group with supplied body elements
      tags: [Groups]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: idGroup
          description: id of the group
          schema:
            type: string
          required: true
          example: 5fe8ff7f67c57310401aca3b
      requestBody:
        description: Body of the request
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Group_update"
      responses:
        "200":
          description: One detailed group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group_populatedUserIds"
        "500":
          description: Error in database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: No group was found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                groupId is required:
                  $ref: "#/components/examples/Error_groupId_required"
                group not found:
                  $ref: "#/components/examples/Error_group_update_error"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "Unauthorized"
        "400":
          description: Invalid group name (permitted all letters, numbers) (length between 3 and 30)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Name of the group is invalid

    delete:
      summary: Delete a group
      description: Deletes a group with id {idGroup} and all its categories, expenses. Also removes the group from all users that were a member of it
      tags: [Groups]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: idGroup
          description: id of the group
          schema:
            type: string
          required: true
          example: 5fe8ff7f67c57310401aca3b
      responses:
        "200":
          description: A group that was deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group_update"
        "500":
          description: Error in database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Invalid prameters error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Group with this id does not exist.
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "Unauthorized"

  /groups/{idGroup}/users/{idUser}:
    delete:
      summary: Remove a user from a group
      description: Remove a user with id {idUser} from the group with id {idGroup}
      tags: [Groups]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: idGroup
          description: id of the group
          schema:
            type: string
          required: true
          example: 5fe8ff7f67c57310401aca3b
        - in: path
          name: idUser
          description: id of the user
          schema:
            type: string
          required: true
          example: 5fe7cc18e0fe833da436fbde
      responses:
        "200":
          description: A group without user with id {idUser}
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group_populatedUserIds"
        "500":
          description: Error in database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Invalid prameters error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                group not found:
                  $ref: "#/components/examples/Error_groupId"
                user not found:
                  $ref: "#/components/examples/Error_userId"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "Unauthorized"

  /groups/{idGroup}/users:
    post:
      summary: Add a user to a group
      description: Add a user with id {idUser} to the group with id {idGroup}
      tags: [Groups]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: idGroup
          description: id of the group
          schema:
            type: string
          required: true
          example: 5fe8ff7f67c57310401aca3b
      requestBody:
        description: Body of the request
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Group_addUser"
      responses:
        "200":
          description: A group with added user with id {idUser}
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group_populatedUserIds"
        "500":
          description: Error in database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Invalid body or parameter error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                group not found:
                  $ref: "#/components/examples/Error_groupId"
                user not found:
                  $ref: "#/components/examples/Error_mail"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "Unauthorized"
        "400":
          description: Invalid email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Email is invalid
